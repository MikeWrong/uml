@startuml
title:抽象工厂模式

interface Computer{
+printComputer():void
}

class SurfaceBookComputer{
+printComputer():void
}

class MacBookComputer{
+printComputer():void
}

Computer<|..SurfaceBookComputer:实现
Computer<|..MacBookComputer:实现

interface ProductionFactory{
+createComputer(String type):Computer
+createSystem(String type):OperatingSystem
}

class MsFactory{
+createComputer(String type):Computer
+createSystem(String type):OperatingSystem
}

class AppleFactory{
+createComputer(String type):Computer
+createSystem(String type):OperatingSystem
}

ProductionFactory<|..MsFactory:实现
ProductionFactory<|..AppleFactory:实现

interface OperatingSystem{
+printSystem():void
}

class Windows8System{
+printSystem():void
}

class MacOsSystem{
+printSystem():void
}

OperatingSystem<|..MacOsSystem:实现
OperatingSystem<|..Windows8System:实现

SurfaceBookComputer<..MsFactory:依赖
Windows8System<..MsFactory:依赖
MacBookComputer<..AppleFactory:依赖
MacOsSystem<..AppleFactory:依赖

/'缺点：在于产品类的扩展，将会是十分费力的，
假如在需要加入新的产品，那么几乎所有的工厂
类都需要进行修改，所以在使用抽象工厂模式时，
对产品等级结构的划分是十分重要的。'/

@enduml
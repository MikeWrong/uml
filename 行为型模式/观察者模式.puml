@startuml
title:观察者模式

/'被观察者(Subject)：知道它的通知对象，事件发生后会通知所有它知道的对象，提供添加删除观察者的接口。'/
class Subject{
-oblist:List<Observer>
+attach():void
+detach():void
+notify():void
}
note left: for all o in oblist;\n  o->update;

/'具体被观察者(ConcreteSubject)：被观察者具体的实例，存储观察者感兴趣的状态。'/
class ConcreteSubject{
-state:int
+getState():int
+setState(int state):void
}

Subject<|--ConcreteSubject:泛化

/'观察者(Observer)：提供通知后的更新事件'/
interface Observer{
+update():void
}

/'具体观察者(ConcreteObserver)：观察者的具体实现。'/
class ConcreteObserver{
-observerState:int
+update():void
}
note bottom: observerState = subject->getState();

Observer<|..ConcreteObserver:实现

ConcreteSubject <.left. ConcreteObserver:依赖
Subject -right-> Observer:关联

@enduml